/*

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Package heat contains heat service constants and configuration.
package heat

import (
	"github.com/openstack-k8s-operators/lib-common/modules/storage"
)

const (
	// ServiceName -
	ServiceName = "heat"
	// ServiceType -
	ServiceType = "orchestration"
	// CfnServiceName -
	CfnServiceName = "heat-cfn"
	// CfnServiceType -
	CfnServiceType = "cloudformation"

	//HealthCheckPath - is the web server path we can use to check the application status
	HealthCheckPath = "/healthcheck"

	// HeatStackUserRole -
	HeatStackUserRole = "heat_stack_user"
	// StackDomainAdminUsername -
	StackDomainAdminUsername = "heat_stack_domain_admin"
	// StackDomainName -
	StackDomainName = "heat_stack"

	// DatabaseCRName - Name of the MariaDBDatabase CR
	DatabaseCRName = "heat"

	// DatabaseName is the name of the database used in CREATE DATABASE statement
	DatabaseName = "heat"

	// DatabaseUsernamePrefix - used by EnsureMariaDBAccount when a new username
	// is to be generated, e.g. "heat_e5a4", "heat_78bc", etc
	DatabaseUsernamePrefix = "heat"

	// HeatPublicPort -
	HeatPublicPort int32 = 8004
	// HeatInternalPort -
	HeatInternalPort int32 = 8004
	// HeatCfnPublicPort -
	HeatCfnPublicPort int32 = 8000
	// HeatCfnInternalPort -
	HeatCfnInternalPort int32 = 8000
	// HeatUID is the UID for the heat user (heat:heat)
	HeatUID int64 = 42418
	// HeatGID is the GID for the heat group (heat:heat)
	HeatGID int64 = 42418
	// KollaConfigDbSync -
	KollaConfigDbSync = "/var/lib/config-data/merged/db-sync-config.json"
	// APIComponent -
	APIComponent = "api"
	// CfnAPIComponent -
	CfnAPIComponent = "cfnapi"
	// EngineComponent -
	EngineComponent = "engine"
	// DefaultsConfigFileName - Provided by Heat umbrella controller
	DefaultsConfigFileName = "00-default.conf"
	// CustomConfigFileName - Config snippets inherited by the top-level CR
	CustomConfigFileName = "01-custom.conf"
	// CustomServiceConfigFileName - Config snippets defined for the sub CR
	CustomServiceConfigFileName = "02-custom-service.conf"
	// CustomConfigSecretsFileName - Snippet generated by Secrets passed
	// to the top-level CR
	CustomConfigSecretsFileName = "03-custom-secrets.conf"
	// CustomServiceConfigSecretsFileName - Snippet generated by Secrets passed
	// to the sub CR
	CustomServiceConfigSecretsFileName = "04-custom-service-secrets.conf" // #nosec G101
	// HeatEngine defines the heat-engine
	HeatEngine storage.PropagationType = "HeatEngine"
	// HeatAPI defines the heat-api/heat-cfn group
	HeatAPI storage.PropagationType = "HeatAPI"
	// Heat is the global ServiceType that refers to all the components deployed
	// by the heat-operator
	Heat storage.PropagationType = "Heat"
)

// DbsyncPropagation keeps track of the DBSync Service Propagation Type
var DbsyncPropagation = []storage.PropagationType{storage.DBSync}

// HeatAPIPropagation is the  definition of the HeatAPI propagation group
var HeatAPIPropagation = []storage.PropagationType{Heat, HeatAPI}

// HeatEnginePropagation is the  definition of the HeatEngine propagation group
var HeatEnginePropagation = []storage.PropagationType{Heat, HeatEngine}
