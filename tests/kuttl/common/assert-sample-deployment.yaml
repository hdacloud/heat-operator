#
# Check for:
#
# - Heat CR
# - HeatAPI CR
# - HeatCfnAPI CR
# - HeatEngine CR
# - Deployment with 1 Pod for HeatAPI CR
# - Deployment with 1 Pod for HeatCfnAPI CR
# - Deployment with 1 Pod for HeatEngine CR
# - service port connectivity
#
apiVersion: heat.openstack.org/v1beta1
kind: Heat
metadata:
  name: heat
spec:
  customServiceConfig: |
    [DEFAULT]
    debug = True
  databaseInstance: openstack
  databaseAccount: "heat"
  heatAPI:
    replicas: 1
    resources: {}
  heatCfnAPI:
    replicas: 1
    resources: {}
  heatEngine:
    replicas: 1
    resources: {}
  memcachedInstance: memcached
  passwordSelectors:
    authEncryptionKey: HeatAuthEncryptionKey
    stackDomainAdminPassword: HeatStackDomainAdminPassword
    service: HeatPassword
  preserveJobs: false
  rabbitMqClusterName: rabbitmq
  secret: osp-secret
  serviceUser: "heat"
status:
  databaseHostname: openstack.heat-kuttl-tests.svc
  heatApiReadyCount: 1
  heatCfnApiReadyCount: 1
  heatEngineReadyCount: 1
  transportURLSecret: rabbitmq-transport-url-heat-heat-transport
---
apiVersion: heat.openstack.org/v1beta1
kind: HeatAPI
metadata:
  finalizers:
    - openstack.org/heatapi
  name: heat-api
  ownerReferences:
    - apiVersion: heat.openstack.org/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: Heat
      name: heat
spec:
  databaseHostname: openstack.heat-kuttl-tests.svc
  databaseAccount: heat
  passwordSelectors:
    authEncryptionKey: HeatAuthEncryptionKey
    stackDomainAdminPassword: HeatStackDomainAdminPassword
    service: HeatPassword
  replicas: 1
  resources: {}
  secret: osp-secret
  serviceAccount: heat-heat
  serviceUser: heat
  transportURLSecret: rabbitmq-transport-url-heat-heat-transport
status:
  readyCount: 1
---
apiVersion: heat.openstack.org/v1beta1
kind: HeatCfnAPI
metadata:
  finalizers:
    - openstack.org/heatcfnapi
  name: heat-cfnapi
  ownerReferences:
    - apiVersion: heat.openstack.org/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: Heat
      name: heat
spec:
  databaseHostname: openstack.heat-kuttl-tests.svc
  databaseAccount: heat
  passwordSelectors:
    authEncryptionKey: HeatAuthEncryptionKey
    stackDomainAdminPassword: HeatStackDomainAdminPassword
    service: HeatPassword
  replicas: 1
  resources: {}
  secret: osp-secret
  serviceAccount: heat-heat
  serviceUser: heat
  transportURLSecret: rabbitmq-transport-url-heat-heat-transport
status:
  readyCount: 1
---
apiVersion: heat.openstack.org/v1beta1
kind: HeatEngine
metadata:
  finalizers:
    - openstack.org/heatengine
  name: heat-engine
  ownerReferences:
    - apiVersion: heat.openstack.org/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: Heat
      name: heat
spec:
  databaseHostname: openstack.heat-kuttl-tests.svc
  databaseAccount: heat
  passwordSelectors:
    authEncryptionKey: HeatAuthEncryptionKey
    stackDomainAdminPassword: HeatStackDomainAdminPassword
    service: HeatPassword
  replicas: 1
  resources: {}
  secret: osp-secret
  serviceAccount: heat-heat
  serviceUser: heat
  transportURLSecret: rabbitmq-transport-url-heat-heat-transport
status:
  readyCount: 1
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: heat-api
  ownerReferences:
  - apiVersion: heat.openstack.org/v1beta1
    kind: HeatAPI
    name: heat-api
spec:
  replicas: 1
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: heat-cfnapi
  ownerReferences:
  - apiVersion: heat.openstack.org/v1beta1
    kind: HeatCfnAPI
    name: heat-cfnapi
spec:
  replicas: 1
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: heat-engine
  ownerReferences:
  - apiVersion: heat.openstack.org/v1beta1
    kind: HeatEngine
    name: heat-engine
spec:
  replicas: 1
---
#
apiVersion: kuttl.dev/v1beta1
kind: TestAssert
commands:
  - script: |
      tupleTemplate='{{ range (index .spec.template.spec.containers 1).env }}{{ .name }}{{ "#" }}{{ .value}}{{"\n"}}{{ end }}'
      imageTuples=$(oc get -n openstack-operators deployment heat-operator-controller-manager -o go-template="$tupleTemplate")
      for ITEM in $(echo $imageTuples); do
        # it is an image
        if echo $ITEM | grep 'RELATED_IMAGE' &> /dev/null; then
          NAME=$(echo $ITEM | sed -e 's|^RELATED_IMAGE_HEAT_\([^_]*\)_.*|\1|')
          IMG_FROM_ENV=$(echo $ITEM | sed -e 's|^.*#\(.*\)|\1|')
          template='{{.spec.containerImage}}'
          case $NAME in
            API)
              SERVICE_IMAGE=$(oc get -n $NAMESPACE heatapi heat-api -o go-template="$template")
              ;;
            CFNAPI)
              SERVICE_IMAGE=$(oc get -n $NAMESPACE heatcfnapi heat-cfnapi -o go-template="$template")
              ;;
            ENGINE)
              SERVICE_IMAGE=$(oc get -n $NAMESPACE heatengine heat-engine -o go-template="$template")
              ;;
          esac
          if [ "$SERVICE_IMAGE" != "$IMG_FROM_ENV" ]; then
            echo "$NAME image ($SERVICE_IMAGE) does not equal $IMG_FROM_ENV"
            exit 1
          fi
        fi
      done
      exit 0
